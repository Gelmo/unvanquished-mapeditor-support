#!/usr/bin/env python3
#-*- coding: UTF-8 -*-

# Copyright (c) 2016-2017, Daemon Developers
# All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of the Daemon developers nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL DAEMON DEVELOPERS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


import argparse
import os
import shutil
import subprocess
import sys
import yaml


ROOT_DIR = os.getenv("ROOT_DIR")
if not ROOT_DIR:
    ROOT_DIR = cwd = os.getcwd()

SRC_DIR = os.getenv("SRC_DIR")
if not SRC_DIR:
    SRC_DIR = os.path.join(ROOT_DIR, "src")

DOCS_DIR = os.getenv("DOCS_DIR")
if not DOCS_DIR:
    DOCS_DIR = os.path.join(ROOT_DIR, "docs")

BUILD_DIR = os.getenv("BUILD_DIR")
if not BUILD_DIR:
    BUILD_DIR = os.path.join(ROOT_DIR, "build")


def error(message):
    raise ValueError(message)

def warning(message):
    print("WARNING: " + message + "\n")

def notice(message):
    print(message)


bin_dir = os.path.abspath(os.path.dirname(os.path.realpath(sys.argv[0])))

settings_file_basename = "settings.yaml"
settings_file_path = os.path.join(SRC_DIR, settings_file_basename)

try:
    settings_file_handle = open(settings_file_path, "r")
    try:
        config = yaml.load(settings_file_handle)
        settings_file_handle.close()
    except:
        error("bad " + settings_file_basename + " file")
except:
    error("missing " + settings_file_basename + " file")

if "settings" not in config.keys():
    error("missing settings in " + settings_file_basename)

settings = config["settings"]
codename = settings["codename"]
basegame = settings["basegame"]
entities = settings["entities"]

if "codename" not in settings.keys():
    error("missing codename key in " + settings_file_basename)

if "basegame" not in settings.keys():
    error("missing basegame key in " + settings_file_basename)

if "entities" not in settings.keys():
    error("missing entities key in " + settings_file_basename)

if "entities" not in settings.keys():
    error("missing entities key in " + settings_file_basename)

if "editors" not in config.keys():
    warning("missing editors in " + settings_file_basename)
    enabled_editor_list = []
else:
    enabled_editor_list = config["editors"]

supported_editor_list = [ "darkradiant", "gtkradiant", "jackhammer", "netradiant" ]

def build(editor_name):
    notice("building " + editor_name)

    build_dir = os.path.join(BUILD_DIR, editor_name)

    buildmenu_option = {
        "gtkradiant": "--gtkradiant",
        "netradiant": "--netradiant",
    }

    def_format = {
        "gtkradiant": "gtkradiant",
        "netradiant": "gtkradiant",
        "jackhammer": "hammer",
    }

    def_basename = {
        "gtkradiant": "entities",
        "netradiant": "entities",
        "jackhammer": codename,
    }

    def_ext = {
        "gtkradiant": "def",
        "netradiant": "def",
        "jackhammer": "fgd",
    }

    if editor_name == "darkradiant":
        game_file = codename + ".game"
        games_dir = os.path.join(build_dir, "games")
        gamefile_path = os.path.join(games_dir, game_file)
    if editor_name == "gtkradiant":
        xlink_dir = os.path.join(build_dir, "game")
        entities_dir = os.path.join(build_dir, "install", basegame, "scripts")
        buildmenu_dir = os.path.join(build_dir, "install", basegame, "scripts")
        buildmenu_file = "default_project.proj"
        shaderlist_dir = os.path.join(build_dir, "install", basegame, "scripts")
        synapse_dir = os.path.join(build_dir, "game")
        synapsefile_name = "synapse.config"
        synapsefile_path = os.path.join(synapse_dir, synapsefile_name)
    elif editor_name == "jackhammer":
        entities_dir = os.path.join(build_dir, "install")
    elif editor_name == "netradiant":
        game_dir = codename + ".game"
        game_file = codename + ".game"
        xlink_dir = os.path.join(build_dir, game_dir)
        basegame_dir = os.path.join(build_dir, game_dir, basegame)
        entities_dir = basegame_dir
        buildmenu_dir = os.path.join(build_dir, game_dir)
        buildmenu_file = "default_build_menu.xml"
        games_dir = os.path.join(build_dir, "games")
        gamefile_path = os.path.join(games_dir, game_file)

    os.makedirs(build_dir, exist_ok=True)
    for file_name in [ "README.md", "LICENSE.md" ]:
        doc_file = os.path.join(DOCS_DIR, editor_name, file_name)
        if os.path.isfile(doc_file):
            shutil.copyfile(doc_file, os.path.join(build_dir, file_name))

    if editor_name in [ "gtkradiant", "netradiant" ]:
        os.makedirs(xlink_dir, exist_ok=True)
        shutil.copyfile(os.path.join(SRC_DIR, "xlink", "game.xlink"), os.path.join(xlink_dir, "game.xlink"))

    if editor_name in [ "gtkradiant", "netradiant", "jackhammer" ]:
        os.makedirs(entities_dir, exist_ok=True)
        entities_path = os.path.join(entities_dir, def_basename[editor_name] + os.path.extsep + def_ext[editor_name])

        if entities == "yaml":
            command = [ os.path.join(bin_dir, "bin", "entities"),
                "-g",
                "-p",
                os.path.join(SRC_DIR, "entities", "header.txt"),
                "-f",
                def_format[editor_name],
                "-d", # TODO: is it still needed?
                "-TDRE",
                os.path.join(SRC_DIR, "entities", "entities.yaml") ]
            result = subprocess.run(command, stdout=subprocess.PIPE)
            f = open(entities_path, "wb")
            f.write(result.stdout)
            f.close()
        elif entities == "def":
            if editor_name not in [ "gtkradiant", "netradiant" ]:
                print("only YAML format can be converted to another format")
                raise
            else:
                shutil.copyfile(os.path.join(SRC_DIR, "entities", "entities.def"), "entities.def")

    if editor_name in buildmenu_option.keys():
        os.makedirs(buildmenu_dir, exist_ok=True)
        buildmenu_path = os.path.join(buildmenu_dir, buildmenu_file)
        command = [
            os.path.join(bin_dir, "bin", "buildmenu"),
            buildmenu_option[editor_name],
            os.path.join(SRC_DIR, "buildmenu", "buildmenu.yaml"),
        ]
        result = subprocess.run(command, stdout=subprocess.PIPE)
        f = open(buildmenu_path, "wb")
        f.write(result.stdout)
        f.close()

    if editor_name == "gtkradiant":
        shaderlist_src_path = os.path.join(SRC_DIR, "shaderlist", "shaderlist.txt")
        shaderlist_build_path = os.path.join(shaderlist_dir, "default_shaderlist.txt")

        if os.path.isfile(shaderlist_src_path):
            os.makedirs(shaderlist_dir, exist_ok=True)
            shutil.copyfile(shaderlist_src_path, shaderlist_build_path)
        else:
            if os.path.isfile(shaderlist_build_path):
                os.remove(shaderlist_build_path)

        os.makedirs(synapse_dir, exist_ok=True)
        command = [ os.path.join(bin_dir, "bin", "gamefile"),
            "--gtkradiant",
            os.path.join(SRC_DIR, "gamefile", "game.yaml") ]
        result = subprocess.run(command, stdout=subprocess.PIPE)
        f = open(synapsefile_path, "wb")
        f.write(result.stdout)
        f.close()

    elif editor_name == "darkradiant":
        os.makedirs(games_dir, exist_ok=True)
        command = [ os.path.join(bin_dir, "bin", "gamefile"),
            "--darkradiant",
            os.path.join(SRC_DIR, "gamefile", "game.yaml") ]
        result = subprocess.run(command, stdout=subprocess.PIPE)
        f = open(gamefile_path, "wb")
        f.write(result.stdout)
        f.close()

    elif editor_name == "netradiant":
        os.makedirs(games_dir, exist_ok=True)
        command = [ os.path.join(bin_dir, "bin", "gamefile"),
            "--netradiant",
            os.path.join(SRC_DIR, "gamefile", "game.yaml") ]
        result = subprocess.run(command, stdout=subprocess.PIPE)
        f = open(gamefile_path, "wb")
        f.write(result.stdout)
        f.close()

        deps_file = os.path.join(SRC_DIR, "deps", "DEPS")
        if os.path.isfile(deps_file):
            os.makedirs(basegame_dir, exist_ok=True)
            shutil.copyfile(deps_file, os.path.join(basegame_dir, "DEPS"))


parser = argparse.ArgumentParser(description = "make editor packs")
parser.add_argument("-m", "--makefile", dest="write_makefile", action="store_true", help="write makefile")
parser.add_argument("editor_list", metavar="editor", nargs="*", type=str, help="build editor gamepack")
args = parser.parse_args()

action_done = False

for editor in enabled_editor_list:
    if editor not in supported_editor_list:
        warning("unsupported editor " + editor + " in " + settings_file_basename)

for editor in args.editor_list:
    if editor == "all":
        for enabled_editor in enabled_editor_list:
            if enabled_editor in supported_editor_list:
                build(enabled_editor)
                action_done = True

    elif editor not in enabled_editor_list:
        warning("disabled editor " + editor + " in " + settings_file_basename)
    else:
        build(editor)
        action_done = True

if args.write_makefile:
    program_path = "./mkeditorpacks/mkeditorpacks"

    makefile_line_list = [
        ".DEFAULT_GOAL := all",
        "",
        "export ROOT_DIR := $(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))",
        "export BUILD_DIR := ${ROOT_DIR}/build",
        "",
        "clean:",
        "\trm -Rf ${BUILD_DIR}",
        "",
        "all:",
        "\t" + program_path + " all",
        "",
    ]

    for editor_name in supported_editor_list:
        if editor_name in enabled_editor_list:
            makefile_line_list.extend([
                editor_name + ":",
                "\t" + program_path + " " + editor_name,
                "",
                ])

    makefile_handle = open("Makefile", "w")
    makefile_handle.writelines("%s\n" % l for l in makefile_line_list)

    action_done = True

if not action_done:
    parser.print_help()
    exit(0)
